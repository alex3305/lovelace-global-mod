(()=>{var d="global-mod",u="0.3.0";var c=class e{static instance;hass;config;styles;constructor(){e.instance=this,e.instance.styles=[],e.instance.refreshHomeAssistant(),Promise.all([e.instance.loadConfig(),e.instance.addEventListeners()])}static get Current(){return window.location.pathname.toLowerCase()}static get DarkMode(){return e.instance.hass.themes.darkMode}static get EditMode(){return e.Current.includes("?edit=1")}static get Name(){return d}static get Version(){return u}async addEventListeners(){window.addEventListener("location-changed",()=>setTimeout(()=>e.instance.applyStyles()),!1),window.addEventListener("popstate",()=>e.instance.applyStyles(),!1),document.addEventListener("visibilitychange",()=>{document.hidden||e.instance.applyStyles()},!1),document.body.addEventListener("click",()=>e.instance.applyStyles(),!1),document.querySelector("hc-main")?.addEventListener("settheme",()=>{e.instance.refreshHomeAssistant(),e.instance.applyStyles()},!1),document.querySelector("home-assistant")?.addEventListener("settheme",()=>{e.instance.refreshHomeAssistant(),e.instance.applyStyles()},!1)}async createStyleElement(t){let a=document.createElement("style");return a.classList?.add(e.Name),a.setAttribute("type","text/css"),a.setAttribute("style","display:none;"),a.textContent+=t.style,(t.darkStyle!==void 0||t.lightStyle!==void 0)&&(a.textContent+=e.DarkMode?t.darkStyle:t.lightStyle),a}async applyStyle(t,a,o,i,s=void 0){if(!o.includes(a.path.toLowerCase())){s!==void 0&&s.remove();return}if(!(i&&a.disabledOnEdit)){s===void 0&&(s=await e.instance.createStyleElement(a),s?.classList?.add(t));try{let n=await e.instance.selectTree(`home-assistant$${a.selector}`,1,9);n.contains(s)||(n.appendChild(s),e.instance.styles.push(s))}catch{console.error(`Could not create rule ${t} after multiple tries...`)}}}async applyStyles(){let t=e.Current,a=e.EditMode;for await(let[o,i]of e.instance.config){let s=e.instance.styles.find(n=>n.classList?.contains(o));e.instance.applyStyle(o,i,t,a,s)}}async loadConfig(){let t=`${e.instance.hass.themes.theme}-${e.Name}`;t in e.instance.hass.themes.themes?console.warn(`Theme still uses the deprecated ${e.Name}-suffix.`):t=`${e.instance.hass.themes.theme}`;let a=e.instance.hass.themes.themes[t];e.instance.config=await e.instance.loadRules(a),!e.instance.config||e.instance.config.size==0?console.info(`%c Global mod %c loaded without any config... 
  \u{1F449} Add a 'mods' section to your theme %c ${t} %c to enable modding.`,"color:white;background:purple;","","color:black;background:lightblue;",""):console.info(`%c Global Mod %c ${e.Version} `,"color:white;background:purple;","color:white;background:darkgreen;")}async loadRules(t){let a=e.Current,o=e.EditMode,i=new Map;for await(var s of Object.keys(t).filter(n=>n.includes("-selector"))){let n=s.substring(0,s.lastIndexOf("-")),l={selector:t[s],path:t[n+"-path"]||"/",style:t[n+"-style"]||"",disabledOnEdit:t[n+"-disable-on-edit"]||!1,darkStyle:t[n+"-style-dark"],lightStyle:t[n+"-style-light"]};i.set(n,l),e.instance.applyStyle(n,l,a,o)}return i}refreshHomeAssistant(){e.instance.hass=document.querySelector("home-assistant").hass}async selectTree(t,a,o){let i=t.split("$"),s;try{for(let n=0;n<i.length;n++)i[n]&&(s=s?s.querySelector(i[n]):document.querySelector(i[n]),n+1<i.length&&(s=s.shadowRoot));if(!s)throw new Error;return s}catch{if(console.warn(`Retry for ${t}`),a===o)throw new Error(`No Element Found for ${t}`);return await new Promise(n=>setTimeout(n,a*10)),await e.instance.selectTree(t,a+1,o)}}};new c;})();
