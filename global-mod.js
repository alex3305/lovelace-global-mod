(()=>{var r="global-mod",d="0.3.0";var c=class e{static instance;hass;config;styles;constructor(){e.instance=this,e.instance.styles=[],e.instance.refreshHomeAssistant(),e.instance.loadConfig(),e.instance.applyStyles(),e.instance.addEventListeners()}static get DarkMode(){return e.instance.hass.themes.darkMode}static get Name(){return r}static get Version(){return d}addEventListeners(){window.addEventListener("location-changed",()=>setTimeout(()=>e.instance.applyStyles()),!1),window.addEventListener("popstate",()=>e.instance.applyStyles(),!1),document.addEventListener("visibilitychange",()=>{document.hidden||e.instance.applyStyles()},!1),document.body.addEventListener("click",()=>e.instance.applyStyles(),!1),document.querySelector("hc-main")?.addEventListener("settheme",()=>{e.instance.refreshHomeAssistant(),e.instance.applyStyles()},!1),document.querySelector("home-assistant")?.addEventListener("settheme",()=>{e.instance.refreshHomeAssistant(),e.instance.applyStyles()},!1)}async addStyleElement(s,t){let n=document.createElement("style");return n.classList?.add(e.Name),n.setAttribute("type","text/css"),t.style&&(n.textContent+=t.style),(t["style-dark"]||t["style-light"])&&(n.textContent+=e.DarkMode?t["style-dark"]:t["style-light"]),s.appendChild(n),n}async applyStyles(){e.instance.styles.forEach(s=>s.classList?.remove("active"));for(let[s,t]of e.instance.config){(!t||!t.path||!t.selector)&&console.error(`Rule ${t} has syntax errors...`);let n=window.location.pathname.toLowerCase(),o=window.location.search.includes("?edit=1");if(n.includes(t.path.toLowerCase())){if(o&&t.disableOnEdit)continue;try{let a=await e.instance.selectTree(`home-assistant$${t.selector}`,1,9),i=await e.instance.addStyleElement(a,t);i?.classList?.add(s),i?.classList?.add("active"),e.instance.styles.push(i)}catch{console.error(`Could not create rule ${s} after multiple tries...`)}}}e.instance.styles.filter(s=>!s.classList?.contains("active")).forEach(s=>s.remove())}loadConfig(){e.instance.config=new Map;let s=`${e.instance.hass.themes.theme}-${e.Name}`;s in e.instance.hass.themes.themes?console.warn(`Theme still uses the deprecated ${e.Name}-suffix.`):s=`${e.instance.hass.themes.theme}`;for(var t in e.instance.hass.themes.themes[s]){let n=t.substring(0,t.indexOf("-")),o=t.substring(t.indexOf("-")+1),a={};e.instance.config.has(n)&&(a=e.instance.config.get(n)),a[o]=e.instance.hass.themes.themes[s][t],e.instance.config.set(n,a)}!e.instance.config||e.instance.config.size==0?console.info(`%c Global mod %c loaded without any config... 
  \u{1F449} Add a 'mods' section to your theme %c ${s} %c to enable modding.`,"color:white;background:purple;","","color:black;background:lightblue;",""):console.info(`%c Global Mod %c ${e.Version} `,"color:white;background:purple;","color:white;background:darkgreen;")}refreshHomeAssistant(){e.instance.hass=document.querySelector("home-assistant").hass}async selectTree(s,t,n){let o=s.split("$"),a;try{for(let i=0;i<o.length;i++)o[i]&&(a=a?a.querySelector(o[i]):document.querySelector(o[i]),i+1<o.length&&(a=a.shadowRoot));if(!a)throw new Error;return a}catch{if(console.warn(`Retry for ${s}`),t===n)throw new Error(`No Element Found for ${s}`);return await new Promise(i=>setTimeout(i,t*25)),await e.instance.selectTree(s,t+1,n)}}};new c;})();
