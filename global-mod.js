(()=>{var d="global-mod",c="0.3.0";var r=class a{#e;#t=[];#s=[];constructor(){this.refreshHomeAssistant(),Promise.all([this.loadConfig(),this.addEventListeners()])}static get Current(){return window.location.pathname.toLowerCase()}static get EditMode(){return a.Current.includes("?edit=1")}static get Name(){return d}static get Version(){return c}get darkMode(){return this.#e.themes.darkMode}async addEventListeners(){Promise.all([window.addEventListener("location-changed",()=>setTimeout(()=>this.applyStyles()),!1),window.addEventListener("popstate",()=>this.applyStyles(),!1),document.addEventListener("visibilitychange",()=>{document.hidden||this.applyStyles()},!1),document.body.addEventListener("click",()=>this.applyStyles(),!1),document.querySelector("hc-main")?.addEventListener("settheme",()=>{this.refreshHomeAssistant(),this.applyStyles()},!1),document.querySelector("home-assistant")?.addEventListener("settheme",()=>{this.refreshHomeAssistant(),this.applyStyles()},!1)])}async createStyleElement(e){let t=document.createElement("style");return t.classList?.add(a.Name),t.setAttribute("type","text/css"),t.setAttribute("style","display:none;"),t.textContent+=e.style,(e.darkStyle!==void 0||e.lightStyle!==void 0)&&(t.textContent+=this.darkMode?e.darkStyle:e.lightStyle),t}async applyStyle(e,t,s,i=void 0){if(!t.includes(e.path.toLowerCase())){i!==void 0&&i.remove();return}if(!(s&&e.disabledOnEdit)){i===void 0&&(i=await this.createStyleElement(e),i?.classList?.add(e.name));try{let n=await this.selectTree(`home-assistant$${e.selector}`,1,9);n.contains(i)||(n.appendChild(i),this.#s.push(i))}catch{console.error(`Could not create rule ${e.name} after multiple tries...`)}}}async applyStyles(){this.#t.forEach(e=>{this.applyStyle(e,a.Current,a.EditMode,this.#s.find(t=>t.classList?.contains(e.name)))})}async loadConfig(){let e=`${this.#e.themes.theme}-${a.Name}`;e in this.#e.themes.themes?console.warn(`Theme still uses the deprecated ${a.Name}-suffix.`):e=`${this.#e.themes.theme}`;let t=this.#e.themes.themes[e];this.#t=await Promise.all(Object.keys(t).filter(s=>s.includes("-selector")).map(s=>this.createRule(t,s)).map(s=>((async()=>this.applyStyle(await s,a.Current,a.EditMode))(),s))),!this.#t||this.#t.size==0?console.info(`%c Global mod %c loaded without any config... 
  \u{1F449} Add a 'mods' section to your theme %c ${e} %c to enable modding.`,"color:white;background:purple;","","color:black;background:lightblue;",""):console.info(`%c Global Mod %c ${a.Version} `,"color:white;background:purple;","color:white;background:darkgreen;")}async createRule(e,t){let s=t.substring(0,t.lastIndexOf("-"));return{name:s,selector:e[t],path:e[s+"-path"]||"/",style:e[s+"-style"]||"",disabledOnEdit:e[s+"-disable-on-edit"]||!1,darkStyle:e[s+"-style-dark"],lightStyle:e[s+"-style-light"]}}refreshHomeAssistant(){this.#e=document.querySelector("home-assistant").hass}async selectTree(e,t,s){let i=e.split("$"),n;try{for(let o=0;o<i.length;o++)i[o]&&(n=n?n.querySelector(i[o]):document.querySelector(i[o]),o+1<i.length&&(n=n.shadowRoot));if(!n)throw new Error;return n}catch{if(console.warn(`Retry for ${e}`),t===s)throw new Error(`No Element Found for ${e}`);return await new Promise(o=>setTimeout(o,t*10)),await this.selectTree(e,t+1,s)}}};new r;})();
