(()=>{var r="global-mod",d="0.3.0";var l=class e{static instance;hass;config;styles;constructor(){e.instance=this,e.instance.styles=[],e.instance.refreshHomeAssistant(),e.instance.loadConfig(),e.instance.applyStyles(),e.instance.addEventListeners()}static get DarkMode(){return e.instance.hass.themes.darkMode}static get Name(){return r}static get Version(){return d}addEventListeners(){window.addEventListener("location-changed",()=>setTimeout(()=>e.instance.applyStyles()),!1),window.addEventListener("popstate",()=>e.instance.applyStyles(),!1),document.addEventListener("visibilitychange",()=>{document.hidden||e.instance.applyStyles()},!1),document.body.addEventListener("click",()=>e.instance.applyStyles(),!1),document.querySelector("hc-main")?.addEventListener("settheme",()=>{e.instance.refreshHomeAssistant(),e.instance.applyStyles()},!1),document.querySelector("home-assistant")?.addEventListener("settheme",()=>{e.instance.refreshHomeAssistant(),e.instance.applyStyles()},!1)}async createStyleElement(s){let t=document.createElement("style");return t.classList?.add(e.Name),t.setAttribute("type","text/css"),t.setAttribute("style","display:none;"),s.style&&(t.textContent+=s.style),(s["style-dark"]||s["style-light"])&&(t.textContent+=e.DarkMode?s["style-dark"]:s["style-light"]),t}async applyStyles(){let s=window.location.pathname.toLowerCase(),t=window.location.search.includes("?edit=1");for await(let[o,a]of e.instance.config){let n=e.instance.styles.find(i=>i.classList?.contains(o));if(!s.includes(a.path.toLowerCase())){n!==void 0&&n.remove();continue}if(!(t&&a.disableOnEdit)){n===void 0&&(n=await e.instance.createStyleElement(a),n?.classList?.add(o));try{let i=await e.instance.selectTree(`home-assistant$${a.selector}`,1,9);i.contains(n)||(i.appendChild(n),e.instance.styles.push(n))}catch{console.error(`Could not create rule ${o} after multiple tries...`)}}}}loadConfig(){let s=`${e.instance.hass.themes.theme}-${e.Name}`;s in e.instance.hass.themes.themes?console.warn(`Theme still uses the deprecated ${e.Name}-suffix.`):s=`${e.instance.hass.themes.theme}`,e.instance.config=new Map([...e.instance.loadRules(s)].filter(([,t])=>t!==void 0).filter(([,t])=>t.path!==void 0).filter(([,t])=>t.selector!==void 0)),!e.instance.config||e.instance.config.size==0?console.info(`%c Global mod %c loaded without any config... 
  \u{1F449} Add a 'mods' section to your theme %c ${s} %c to enable modding.`,"color:white;background:purple;","","color:black;background:lightblue;",""):console.info(`%c Global Mod %c ${e.Version} `,"color:white;background:purple;","color:white;background:darkgreen;")}loadRules(s){let t=new Map;for(var o in e.instance.hass.themes.themes[s]){let a=o.substring(0,o.indexOf("-")),n=o.substring(o.indexOf("-")+1);if(a.length===0||n.length===0)continue;let i={};t.has(a)&&(i=t.get(a)),i[n]=e.instance.hass.themes.themes[s][o],t.set(a,i)}return t}refreshHomeAssistant(){e.instance.hass=document.querySelector("home-assistant").hass}async selectTree(s,t,o){let a=s.split("$"),n;try{for(let i=0;i<a.length;i++)a[i]&&(n=n?n.querySelector(a[i]):document.querySelector(a[i]),i+1<a.length&&(n=n.shadowRoot));if(!n)throw new Error;return n}catch{if(console.warn(`Retry for ${s}`),t===o)throw new Error(`No Element Found for ${s}`);return await new Promise(i=>setTimeout(i,t*10)),await e.instance.selectTree(s,t+1,o)}}};new l;})();
